@{
    ViewData["Title"] = "CardGameMemory";
}
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="/" />
<link rel="stylesheet" href="~/js/index.js" />

<style>
    @@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai&display=swap');

    * {
        font-family: 'IBM Plex Sans Thai';
    }

    body {
        font-family: 'IBM Plex Sans Thai';
        font-style: normal;
        font-weight: 400;

    }

    .h1 .p .button{
        font-family: 'IBM Plex Sans Thai';
        font-style: normal;
        font-weight: 400;

    }
    hr{
        color: white;
    }
    .heading {  
  text-align: center;  
  background: rgb(0, 15, 46);  
  padding: 1rem;  
  color: bisque;  
 }  
 .count-container {  
  display: flex;  
  justify-content: space-between;  
  align-items: center;  
  width: 60%;  
  margin: auto auto;  
  padding: 2rem 0;  
 }  
 .attempts {  
  font-size: 2rem;  
  color: antiquewhite;  
 }   
 .reset {  
  font-size: 2rem;  
  color: antiquewhite;  
  cursor: pointer;  
  border: 1px solid grey;  
  padding: .5rem;  
 }  
 .reset:hover {  
  transform: scale(1.2);  
 }  
 .time {  
  font-size: 2rem;  
  color: antiquewhite;  
 }  
 .grid {  
  max-width: 750px;  
  margin: 0 auto;  
  display: flex;  
  flex-wrap: wrap;  
  justify-content: space-evenly;  
 }  
 .card {  
  position: relative;  
  transition: all 0.4s linear;  
  transform-style: preserve-3d;  
  margin: 5px;  
 }  
 .card,  
 .back,  
 .front {  
  height: 100px;  
  width: 100px;  
 }  
 .back,  
 .front {  
  position: absolute;  
  backface-visibility: hidden;  
 }  
 .front {  
  background: #fab942 url('../media/question.gif') no-repeat center center /  
   contain;  
 }  
 .back {  
  transform: rotateY(180deg);  
  background-color: white;  
  background-size: contain;  
  background-repeat: no-repeat;  
  background-position: center center;  
 }  
 .selected {  
  border: 4px solid blue;  
  transform: rotateY(180deg);  
 }  
 .match .front {  
  border: 0px;  
  background: rgb(4, 44, 2) url("../media/celebrate.gif") no-repeat center center /  
  contain !important;  
  cursor: not-allowed;  
  transform: none !important;  
 }  
    text {
        font-family: 'IBM Plex Sans Thai';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        font-size: 11px;
        pointer-events: none;
    }

    #chart {
        position: absolute;
        width: 500px;
        height: 500px;
        top: 0;
        left: 0;
    }

    #question {

        height: 525px;

    }

    #question h1 {
        font-size: 30px;
        font-weight: bold;
        font-family: 'IBM Plex Sans Thai';
        font-style: normal;
        position: absolute;
        padding: 0;
        margin: 0;
        left: 40%;
        top: 46%;
        -webkit-transform: translate(0, -50%);
        transform: translate(0, -50%);
    }

    #question p{
        font-size: 20px;
        font-weight: bold;
        font-family: 'IBM Plex Sans Thai';
        font-style: normal;
        position: absolute;
        padding: 0;
        margin: 0;
        left: 40%;
        top: 46%;
        -webkit-transform: translate(0, -50%);
        transform: translate(0, -50%);

    }

    .spinner {
        width:1500px;
        margin-left: auto;
        margin-right: auto;
        position: sticky;
        z-index: 10;
        border-radius:20px;
        background-color:rgba(196, 196, 196, 0.75);
    }
    .bttn{
        top:10px;
        left:0px;
        border-radius: 30px;
        width: 150px;
        height: 45px;
    }
    .container {
        
        width:80%;
    }

</style>


<div style="margin-top:50px"> </div>
<div class="text-center">
    <h1><strong>ธรรมมะความจำเกมส์ [วัด]</strong></h1>
</div><hr></hr>

<!DOCTYPE html>  
 <html lang="en">  
  <head>  
   <meta charset="UTF-8" />  
   <meta name="viewport" content="width=device-width, initial-scale=1.0" />  
   <title>Memory Game</title>  
   <script src="https://kit.fontawesome.com/d77ac583c4.js" crossorigin="anonymous"></script>  
   <link rel="stylesheet" href="assets/stylesheet/style.css">  
  </head>  
  <body>  
   <header>  
    <h1 class="heading">How good is your Memory?</h1>  
   </header>  
   <div class="count-container">  
    <p class="attempts">Attempts: <span class="count"></span></p>  
    <span class="reset">Reset <i class="fas fa-sync"></i></span>  
    <p class="time">Time: <span class="min-count">00</span>: <span class="sec-count">00</span></p>  
   </div>  
    <div id="game"></div>  
   <script src="script.js"></script>  
  </body>  
 </html> 
 



 @section Scripts{
     <script>
     // Card data  
 const cardsArray = [  
  {  
   name: "temples1",  
   img: "./wwwroot/css/โบสถ์กลางทะเล.png",  
  },  
  {  
   name: "temples2",  
   img: "./wwwroot/css/วัดโพธิ์.png",  
  },  
  {  
   name: "temples3",  
   img: "./wwwroot/css/วัดบ้านไร่.png",  
  },  
  {  
   name: "temples4",  
   img: "./wwwroot/css/วัดพระเเก้ว.png",  
  },  
  {  
   name: "temples5",  
   img: "./wwwroot/css/วัดพระธาตุเขาน้อย.png",  
  },  
  {  
   name: "temples6",  
   img: "./wwwroot/css/วัดพระธาตุดอยสุเทพ.png",  
  },  
  {  
   name: "temples7",  
   img: "./wwwroot/css/วัดพระธาตุผาซ่อนแก้ว.png",  
  },  
  {  
   name: "temples8",  
   img: "./wwwroot/css/วัดพระธาตุสุพรรณหงส์.png",  
  },  
  {  
   name: "temples9",  
   img: "./wwwroot/css/วัดพระมหาธาตุวรมหาวิหาร.png",  
  },  
  {  
   name: "temples10",  
   img: "./wwwroot/css/วัดร่องขุ่น.png",  
  },  
  {  
   name: "temples11",  
   img: "./wwwroot/css/วัดศรีชุม.png",  
  },  
  {  
   name: "temples12",  
   img: "./assets/media/pokemon12.วัดสิรินธรวรารามภูพร้าว.png",  
  },  
 ];  
 // GAME   
 const game = document.getElementById("game");  
 const grid = document.createElement("section");  
 grid.classList.add("grid");  
 // game.addEventListener("click", secCount);  
 game.appendChild(grid);  
 // DOUBLE ARREY  
 let gameGrid = cardsArray.concat(cardsArray);  
 // FOR RAMDOMISING THE CARDS EVERY TIME WE REFERESH THE PAGE  
 gameGrid.sort(() => 0.5 - Math.random());  
 // CREATE CARDS  
 gameGrid.forEach((item) => {  
  const card = document.createElement("div");  
  card.classList.add(`card`,`${item.name}`);  
  card.dataset.name = item.name;  
  const front = document.createElement("div");  
  front.classList.add("front");  
  const back = document.createElement("div");  
  back.classList.add("back");  
  back.style.backgroundImage = `url(${item.img})`;  
  grid.appendChild(card);  
  card.appendChild(front);  
  card.appendChild(back);  
 });  
 // ATTEMPTS COUNT  
 let attemptCount = 0;  
 let attempts = document.querySelector(".count");  
 attempts.innerText = attemptCount;  
 // TIME COUNT  
 var sec = 0;  
 var timeInSec;  
 let min = 0;  
 function secCount() {  
  sec = sec + 1;  
  document.querySelector(".sec-count").innerText = Math.floor(sec % 60);  
  timeInSec = setTimeout(secCount, 1000);  
  min = Math.floor(sec / 60);  
  document.querySelector(".min-count").innerText = min;  
 }  
 var timeStarted = false;  
 // secCount();  
 // RESET ALL  
 let reset = document.querySelector(".reset");  
 reset.addEventListener("click", () => {  
  let confirmReset = confirm("Whole game will start again. continue to reset?");  
  if (confirmReset === true) {  
   window.location.reload();  
  }   
 });  
 // VARIABLES FOR THE GAME  
 let firstGuess = "";  
 let secondGuess = "";  
 let previousTarget = null;  
 let count = 0;  
 let delay = 1200;  
 // FUNCTIONS FOR THE GAME  
 const match = () => {  
  var selected = document.querySelectorAll(".selected");  
  selected.forEach((card) => {  
   card.classList.add("match");  
  });  
 };  
 const resetGuesses = () => {  
  firstGuess = "";  
  secondGuess = "";  
  count = 0;  
  var selected = document.querySelectorAll(".selected");  
  selected.forEach((card) => {  
   card.classList.remove("selected");  
  });  
 };  
 // GAME LOGICS  
 grid.addEventListener("click", function (event) {  
  !timeStarted && secCount();  
  timeStarted = true;  
  let clicked = event.target;   
  attemptCount++;  
  attempts.innerText = attemptCount;  
  if (  
   clicked.nodeName === "SECTION" ||  
   clicked === previousTarget ||  
   clicked.parentNode.classList.contains("selected")  
  ) {  
   return;  
  }  
  if (count < 2) {  
   count++;  
   if (count === 1) {  
    // Assign first guess  
    firstGuess = clicked.parentNode.dataset.name;  
    clicked.parentNode.classList.add("selected");  
   } else {  
    // Assign second guess  
    secondGuess = clicked.parentNode.dataset.name;  
    clicked.parentNode.classList.add("selected");  
   }  
   // If both guesses are not empty...  
   if (firstGuess !== "" && secondGuess !== "") {  
    // and the first guess matches the second match...  
    if (firstGuess === secondGuess) {  
     // run the match function  
     // match();  
     // resetGuesses();  
     setTimeout(match, delay);  
     setTimeout(resetGuesses, delay);  
     var matched = document.querySelectorAll(`.${firstGuess}`);  
     matched.forEach(node => node.addEventListener('click',function (e) {    
      e.stopPropagation();  
     }))  
    } else {  
     setTimeout(resetGuesses, delay);  
    }  
   }  
  }  
  // Set previous target to clicked  
  previousTarget = clicked;  
 });  
     </script>
 }